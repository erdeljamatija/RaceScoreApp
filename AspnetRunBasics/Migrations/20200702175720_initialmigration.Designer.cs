// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RaceScore.Data;

namespace RaceScore.Migrations
{
    [DbContext(typeof(RaceScoreContext))]
    [Migration("20200702175720_initialmigration")]
    partial class initialmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RaceScore.Entities.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Races");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Name = "Jarunska Desetka"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Name = "Sljemenski maraton"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Name = "Proljetni cener"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            Name = "Zagrebački maraton"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Name = "Wings for life"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            Name = "Grawe noćni maraton"
                        });
                });

            modelBuilder.Entity("RaceScore.Entities.RaceResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RaceRefId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ResultTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("RaceRefId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("RaceScore.Entities.RaceResult", b =>
                {
                    b.HasOne("RaceScore.Entities.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
